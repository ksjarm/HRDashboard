{
  "info": {
    "_postman_id": "d54be43d-6e90-44b4-a8ac-b061ff5ad590",
    "name": "hrapp",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "9319536"
  },

  "item": [
    {
      "name": "Employees Controller Test",
      "item": [
        {
          "name": "Get All Employees",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response body is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "    pm.expect(jsonData.length).to.eql(3);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{url}}/api/employees",
              "host": ["{{url}}"],
              "path": ["api", "employees"]
            }
          },
          "response": []
        },
        {
          "name": "Add New Employee",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "pm.test(\"Employee data is correct\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.name).to.eql(\"Lana\");",
                  "    pm.expect(jsonData.surname).to.eql(\"Banana\");",
                  "    pm.expect(jsonData.gender).to.eql(\"Female\");",
                  "    pm.expect(jsonData.position).to.eql(\"Vendor\");",
                  "    pm.expect(jsonData.salary).to.eql(2000);",
                  "    pm.expect(jsonData.status).to.eql(\"Active\");",

                  "    pm.environment.set(\"employeeId\", jsonData.id);",
                  "    pm.environment.set(\"employeeName\", jsonData.name);",
                  "    pm.environment.set(\"employeeSurname\", jsonData.surname);",
                  "    pm.environment.set(\"employeeGender\", jsonData.gender);",
                  "    pm.environment.set(\"employeePosition\", jsonData.position);",
                  "    pm.environment.set(\"employeeSalary\", jsonData.salary);",
                  "    pm.environment.set(\"employeeStatus\", jsonData.status);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\": \"Lana\",\n\t\"surname\": \"Banana\",\n\t\"gender\": \"Female\",\n\t\"dateOfBirth\": \"2002-12-30\",\n\t\"email\": \"\",\n\t\"phoneNumber\": \"556394959\",\n\t\"adress\": \"someadress-5\",\n\t\"position\": \"Vendor\",\n\t\"status\": \"Active\",\n\t\"salary\": \"2000\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{url}}/api/employees",
              "host": ["{{url}}"],
              "path": ["api", "employees"]
            }
          },
          "response": []
        },
        {
          "name": "Get Existing Employee",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Employee data is correct\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.eql(pm.environment.get(\"employeeId\"));",
                  "    pm.expect(jsonData.name).to.eql(pm.environment.get(\"employeeName\"));",
                  "    pm.expect(jsonData.surname).to.eql(pm.environment.get(\"employeeSurname\"));",
                  "    pm.expect(jsonData.gender).to.eql(pm.environment.get(\"employeeGender\"));",
                  "    pm.expect(jsonData.position).to.eql(pm.environment.get(\"employeePosition\"));",
                  "    pm.expect(jsonData.salary).to.eql(pm.environment.get(\"employeeSalary\"));",
                  "    pm.expect(jsonData.status).to.eql(pm.environment.get(\"employeeStatus\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{url}}/api/employees/{{employeeId}}",
              "host": ["{{url}}"],
              "path": ["api", "employees", "{{employeeId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Get Nonexistent Employee",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{url}}/api/employees/1000",
              "host": ["{{url}}"],
              "path": ["api", "employees", "1000"]
            }
          },
          "response": []
        },
        {
          "name": "Add Employee with null position",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\": \"Lana\",\n\t\"surname\": \"Banana\",\n\t\"gender\": \"Female\",\n\t\"dateOfBirth\": \"2002-12-30\",\n\t\"email\": \"\",\n\t\"phoneNumber\": \"556394959\",\n\t\"adress\": \"someadress-5\",\n\t\"position\": \"\",\n\t\"status\": \"Active\",\n\t\"salary\": \"2000\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{url}}/api/employees",
              "host": ["{{url}}"],
              "path": ["api", "employees"]
            }
          },
          "response": []
        },
        {
          "name": "Update Incorrect Employee (the ID in the URL does not match the ID in the request body)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"id\": 1,\n\t\"name\": \"Lana\",\n\t\"surname\": \"Cherry\",\n\t\"gender\": \"Female\",\n\t\"dateOfBirth\": \"2002-12-30\",\n\t\"email\": \"\",\n\t\"phoneNumber\": \"556394959\",\n\t\"adress\": \"someadress-5\",\n\t\"position\": \"Vendor\",\n\t\"status\": \"Active\",\n\t\"salary\": \"2000\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{url}}/api/employees/{{employeeId}}",
              "host": ["{{url}}"],
              "path": ["api", "employees", "{{employeeId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update Nonexistent Employee",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"id\": 1000,\n\t\"name\": \"Lana\",\n\t\"surname\": \"Banana\",\n\t\"gender\": \"Female\",\n\t\"dateOfBirth\": \"2002-12-30\",\n\t\"email\": \"\",\n\t\"phoneNumber\": \"556394959\",\n\t\"adress\": \"someadress-5\",\n\t\"position\": \"Vendor\",\n\t\"status\": \"Active\",\n\t\"salary\": \"2000\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{url}}/api/employees",
              "host": ["{{url}}"],
              "path": ["api", "employees", "1000"]
            }
          },
          "response": []
        },
        {
          "name": "Update Employee",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"id\": {{employeeId}},\n\t\"name\": \"Lana\",\n\t\"surname\": \"Cherry\",\n\t\"gender\": \"Female\",\n\t\"dateOfBirth\": \"2002-12-30\",\n\t\"email\": \"\",\n\t\"phoneNumber\": \"556394959\",\n\t\"adress\": \"someadress-5\",\n\t\"position\": \"Vendor\",\n\t\"status\": \"Active\",\n\t\"salary\": \"2000\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{url}}/api/employees/{{employeeId}}",
              "host": ["{{url}}"],
              "path": ["api", "employees", "{{employeeId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Check That Employee Was Updated",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Employee data is updated\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.name).to.eql(\"Lana\");",
                  "    pm.expect(jsonData.surname).to.eql(\"Cherry\");",

                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{url}}/api/employees/{{employeeId}}",
              "host": ["{{url}}"],
              "path": ["api", "employees", "{{employeeId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Nonexistent Employee",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{url}}/api/employees/1000",
              "host": ["{{url}}"],
              "path": ["api", "employees", "1000"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Employee",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{url}}/api/employees/{{shiftId}}",
              "host": ["{{url}}"],
              "path": ["api", "employees", "{{employeeId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Check That Employee Was Deleted",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{url}}/api/employees/{{employeeId}}",
              "host": ["{{url}}"],
              "path": ["api", "employees", "{{employeeId}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Shifts Controller Tests",
      "item": [
        {
          "name": "Authenticate User Without Schedule Access",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Token is present\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.environment.set(\"authToken1\", jsonData.token);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"username\": \"roland.tuvi@company.ee\",\n\t\"password\": \"test2\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{url}}/api/users/login",
              "host": ["{{url}}"],
              "path": ["api", "users", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Get Shifts Without Schedule Access",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken1}}"
              }
            ],
            "url": {
              "raw": "{{url}}/api/shifts",
              "host": ["{{url}}"],
              "path": ["api", "shifts"]
            }
          },
          "response": []
        },
        {
          "name": "Get Shift Without Schedule Access",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken1}}"
              }
            ],
            "url": {
              "raw": "{{url}}/api/shifts/1",
              "host": ["{{url}}"],
              "path": ["api", "shifts", "1"]
            }
          },
          "response": []
        },
        {
          "name": "Update Shift Without Schedule Access",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken1}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"id\": 1,\n\t\"title\": \"Updated Shift\",\n\t\"date\": \"2023-12-30\",\n\t\"startTime\": \"12:00\",\n\t\"endTime\": \"20:00\",\n\t\"valik\": \"Onetime\",\n\t\"employeeIds\": [\n\t2, 3\n\t]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{url}}/api/shifts/1",
              "host": ["{{url}}"],
              "path": ["api", "shifts", "1"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Shift Without Schedule Access",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken1}}"
              }
            ],
            "url": {
              "raw": "{{url}}/api/shifts/1",
              "host": ["{{url}}"],
              "path": ["api", "shifts", "1"]
            }
          },
          "response": []
        },
        {
          "name": "Authenticate User With Schedule Access",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Token is present\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.environment.set(\"authToken\", jsonData.token);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"username\": \"lilianna.tamm@company.ee\",\n\t\"password\": \"test1\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{url}}/api/users/login",
              "host": ["{{url}}"],
              "path": ["api", "users", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Get Shifts",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response body is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{url}}/api/shifts",
              "host": ["{{url}}"],
              "path": ["api", "shifts"]
            }
          },
          "response": []
        },
        {
          "name": "Get Nonexistent Shift",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{url}}/api/shifts/1000",
              "host": ["{{url}}"],
              "path": ["api", "shifts", "1000"]
            }
          },
          "response": []
        },
        {
          "name": "Add Existing Shift",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 409\", function () {",
                  "    pm.response.to.have.status(409);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"id\": 1,\n\t\"title\": \"Existing Shift\",\n\t\"date\": \"2023-12-30\",\n\t\"startTime\": \"8:00\",\n\t\"endTime\": \"16:00\",\n\t\"valik\": \"Onetime\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{url}}/api/shifts",
              "host": ["{{url}}"],
              "path": ["api", "shifts"]
            }
          },
          "response": []
        },
        {
          "name": "Add Shift With Nonexistent EmployeeId",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"title\": \"Existing Shift\",\n\t\"date\": \"2023-12-30\",\n\t\"startTime\": \"8:00\",\n\t\"endTime\": \"16:00\",\n\t\"valik\": \"Onetime\",\n\t\"employeeIds\": [\n\t1000\n\t]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{url}}/api/shifts",
              "host": ["{{url}}"],
              "path": ["api", "shifts"]
            }
          },
          "response": []
        },
        {
          "name": "Add New Shift",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "pm.test(\"Shift data is correct\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.title).to.eql(\"New Shift\");",
                  "    pm.expect(jsonData.date).to.eql(\"2023-12-30\");",
                  "    pm.expect(jsonData.startTime).to.eql(\"8:00\");",
                  "    pm.expect(jsonData.endTime).to.eql(\"16:00\");",
                  "    pm.expect(jsonData.valik).to.eql(\"Onetime\");",

                  "    pm.expect(jsonData.employeeIds).to.be.an(\"array\");",
                  "    pm.expect(jsonData.employeeIds[0]).to.eql(1);",
                  "    pm.expect(jsonData.employeeIds[1]).to.eql(2);",

                  "    pm.environment.set(\"shiftId\", jsonData.id);",
                  "    pm.environment.set(\"shiftTitle\", jsonData.title);",
                  "    pm.environment.set(\"shiftDate\", jsonData.date);",
                  "    pm.environment.set(\"shiftStartTime\", jsonData.startTime);",
                  "    pm.environment.set(\"shiftEndTime\", jsonData.endTime);",
                  "    pm.environment.set(\"shiftValik\", jsonData.valik);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"title\": \"New Shift\",\n\t\"date\": \"2023-12-30\",\n\t\"startTime\": \"8:00\",\n\t\"endTime\": \"16:00\",\n\t\"valik\": \"Onetime\",\n\t\"employeeIds\": [\n\t1, 2\n\t]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{url}}/api/shifts",
              "host": ["{{url}}"],
              "path": ["api", "shifts"]
            }
          },
          "response": []
        },
        {
          "name": "Get Existing Shift",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Shift data is correct\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.eql(pm.environment.get(\"shiftId\"));",
                  "    pm.expect(jsonData.title).to.eql(pm.environment.get(\"shiftTitle\"));",
                  "    pm.expect(jsonData.date).to.eql(pm.environment.get(\"shiftDate\"));",
                  "    pm.expect(jsonData.startTime).to.eql(pm.environment.get(\"shiftStartTime\"));",
                  "    pm.expect(jsonData.endTime).to.eql(pm.environment.get(\"shiftEndTime\"));",
                  "    pm.expect(jsonData.valik).to.eql(pm.environment.get(\"shiftValik\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{url}}/api/shifts/{{shiftId}}",
              "host": ["{{url}}"],
              "path": ["api", "shifts", "{{shiftId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update Incorrect Shift (the ID in the URL does not match the ID in the request body)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"id\": 1,\n\t\"title\": \"Updated Shift\",\n\t\"date\": \"2023-12-30\",\n\t\"startTime\": \"12:00\",\n\t\"endTime\": \"20:00\",\n\t\"valik\": \"Onetime\",\n\t\"employeeIds\": [\n\t1, 2, 3\n\t]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{url}}/api/shifts/{{shiftId}}",
              "host": ["{{url}}"],
              "path": ["api", "shifts", "{{shiftId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update Nonexistent Shift",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"id\": 1000,\n\t\"title\": \"Updated Shift\",\n\t\"date\": \"2023-12-30\",\n\t\"startTime\": \"12:00\",\n\t\"endTime\": \"20:00\",\n\t\"valik\": \"Onetime\",\n\t\"employeeIds\": [\n\t1, 2, 3\n\t]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{url}}/api/shifts/1000",
              "host": ["{{url}}"],
              "path": ["api", "shifts", "1000"]
            }
          },
          "response": []
        },
        {
          "name": "Update Shift With Nonexistent EmployeeId",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"id\": {{shiftId}},\n\t\"title\": \"Updated Shift\",\n\t\"date\": \"2023-12-30\",\n\t\"startTime\": \"12:00\",\n\t\"endTime\": \"20:00\",\n\t\"valik\": \"Onetime\",\n\t\"employeeIds\": [\n\t1000\n\t]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{url}}/api/shifts/{{shiftId}}",
              "host": ["{{url}}"],
              "path": ["api", "shifts", "{{shiftId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update Shift",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"id\": {{shiftId}},\n\t\"title\": \"Updated Shift\",\n\t\"date\": \"2023-12-30\",\n\t\"startTime\": \"12:00\",\n\t\"endTime\": \"20:00\",\n\t\"valik\": \"Onetime\",\n\t\"employeeIds\": [\n\t2, 3\n\t]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{url}}/api/shifts/{{shiftId}}",
              "host": ["{{url}}"],
              "path": ["api", "shifts", "{{shiftId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Check That Shift Was Updated",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Shift data is updated\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.title).to.eql(\"Updated Shift\");",
                  "    pm.expect(jsonData.date).to.eql(\"2023-12-30\");",
                  "    pm.expect(jsonData.startTime).to.eql(\"12:00\");",
                  "    pm.expect(jsonData.endTime).to.eql(\"20:00\");",
                  "    pm.expect(jsonData.valik).to.eql(\"Onetime\");",

                  "    pm.expect(jsonData.employeeIds).to.be.an(\"array\");",
                  "    pm.expect(jsonData.employeeIds[0]).to.eql(2);",
                  "    pm.expect(jsonData.employeeIds[1]).to.eql(3);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{url}}/api/shifts/{{shiftId}}",
              "host": ["{{url}}"],
              "path": ["api", "shifts", "{{shiftId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Nonexistent Shift",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{url}}/api/shifts/1000",
              "host": ["{{url}}"],
              "path": ["api", "shifts", "1000"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Shift",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{url}}/api/shifts/{{shiftId}}",
              "host": ["{{url}}"],
              "path": ["api", "shifts", "{{shiftId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Check That Shift Was Deleted",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{url}}/api/shifts/{{shiftId}}",
              "host": ["{{url}}"],
              "path": ["api", "shifts", "{{shiftId}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
			"name": "Notifications Controller Tests",
			"item": [
				{
					"name": "Get Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.length).to.eql(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/notifications",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Nonexisting Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/notifications/1000",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"notifications",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add notification with existing ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"notificationId\": 1,\r\n    \"message\": \"Shift update: MidDay Shift\",\r\n    \"date\": \"2023-12-11T17:37:09.05\",\r\n    \"type\": \"Shift Update\"\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/notifications",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add notification with invalid date format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"message\": \"string\",\r\n  \"date\": \"2023-12-18T19:\",\r\n  \"type\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/notifications",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Notification data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Shift update: Evening Shift\");\r",
									"    pm.expect(jsonData.date.substring(0, 19)).to.eql(\"2023-12-18T17:37:09\");\r",
									"    pm.expect(jsonData.type).to.eql(\"Shift Update\");\r",
									"    pm.environment.set(\"notificationId\", jsonData.notificationId); \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"message\": \"Shift update: Evening Shift\",\r\n  \"date\": \"2023-12-18T17:37:09.050Z\",\r\n  \"type\": \"Shift Update\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/notifications",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Existing  Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Notification data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.notificationId).to.eql(pm.environment.get(\"notificationId\"));\r",
									"    pm.expect(jsonData.message).to.eql(\"Shift update: Evening Shift\");\r",
									"    pm.expect(jsonData.date.substring(0, 19)).to.eql(\"2023-12-18T17:37:09\");\r",
									"    pm.expect(jsonData.type).to.eql(\"Shift Update\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/notifications/{{notificationId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"notifications",
								"{{notificationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an existing notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 for updating a notification\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"notificationId\": {{notificationId}},\r\n  \"message\": \"Shift update: MidDay Shift\",\r\n  \"date\": \"2023-12-11T17:37:09.050Z\",\r\n  \"type\": \"Shift Update\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/notifications/{{notificationId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"notifications",
								"{{notificationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Notification Updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"notification get data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Shift update: MidDay Shift\");\r",
									"    pm.expect(jsonData.date.substring(0, 19)).to.eql(\"2023-12-11T17:37:09\");\r",
									"    pm.expect(jsonData.type).to.eql(\"Shift Update\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/notifications/{{notificationId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"notifications",
								"{{notificationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Nonexistent notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"notificationId\": 1000,\r\n  \"message\": \"string\",\r\n  \"date\": \"2023-12-18T18:20:09.351Z\",\r\n  \"type\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/notifications/1000",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"notifications",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Incorrect notification(the ID in the URL does not match the ID in the request body)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"notificationId\": 1,\r\n  \"message\": \"string\",\r\n  \"date\": \"2023-12-18T18:20:09.351Z\",\r\n  \"type\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/notifications/{{notificationId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"notifications",
								"{{notificationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Nonexistent notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/notifications/1000",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"notifications",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete existing notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 for deleting a notification\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/notifications/{{notificationId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"notifications",
								"{{notificationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Deleted notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/notifications/{{notificationId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"notifications",
								"{{notificationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 for deleting all notifications\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/notifications/deleteAll",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"notifications",
								"deleteAll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check that all notifications were deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response equel to 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/notifications",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"notifications"
							]
						}
					},
					"response": []
				}
			]
		}
  ]
}
